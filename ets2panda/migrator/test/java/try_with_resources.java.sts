/*
 * Copyright (c) 2022-2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.ohos.migrator.test.java;

import * from "std/math/math";
import BufferedReader from "java/io";
import File from "java/io";
import FileNotFoundException from "java/io";
import FileReader from "java/io";
import IOException from "java/io";
import PrintWriter from "java/io";
import * from "java/sql";
import Scanner from "java/util";
open class TryWithResources  {
// Basic try-with-resources (no catch/finally blocks)
    open readFile(): void  throws {
        let line : String = "";
        let path : String = "";
        {
            const fr : FileReader = new FileReader(path);
            let primaryExc_res0 : Throwable = null;
            try {
                defer if (fr != null) {
                    if (primaryExc_res0 != null) {
                        try {
                            fr.close();
                        }
                        catch (suppressedExc : Throwable) {
                            primaryExc_res0.addSuppressed(suppressedExc);
                        }
                    }
                    else {
                        fr.close();
                    }
                }
                const br : BufferedReader = new BufferedReader(fr);
                let primaryExc_res1 : Throwable = null;
                try {
                    defer if (br != null) {
                        if (primaryExc_res1 != null) {
                            try {
                                br.close();
                            }
                            catch (suppressedExc : Throwable) {
                                primaryExc_res1.addSuppressed(suppressedExc);
                            }
                        }
                        else {
                            br.close();
                        }
                    }
                    line = br.readLine();
                }
                catch (t : Throwable) {
                    primaryExc_res1 = t;
                    throw t;
                }
            }
            catch (t : Throwable) {
                primaryExc_res0 = t;
                throw t;
            }
        }
    }
// with catch block
    open viewTable(con : Connection): void  throws {
        let query : String = "select COF_NAME, SUP_ID, PRICE, SALES, TOTAL from COFFEES";
        try {
            const stmt : Statement = con.createStatement();
            let primaryExc_res0 : Throwable = null;
            try {
                defer if (stmt != null) {
                    if (primaryExc_res0 != null) {
                        try {
                            stmt.close();
                        }
                        catch (suppressedExc : Throwable) {
                            primaryExc_res0.addSuppressed(suppressedExc);
                        }
                    }
                    else {
                        stmt.close();
                    }
                }
                let rs : ResultSet = stmt.executeQuery(query);
                while(rs.next())
                {
                    System.out.println(rs.getString("COF_NAME") + ", " + rs.getInt("SUP_ID") + ", " + rs.getFloat("PRICE") + ", " + rs.getInt("SALES") + ", " + rs.getInt("TOTAL"));
                }
            }
            catch (t : Throwable) {
                primaryExc_res0 = t;
                throw t;
            }
        }
        catch (e : SQLException) {
            System.err.println("SQLState: " + e.getSQLState());
            System.err.println("Error Code: " + e.getErrorCode());
            System.err.println("Message: " + e.getMessage());
        }

    }
// with finally block
    open readFile2(): void  throws {
        let line : String = "";
        let path : String = "";
        {
            defer {
                System.out.println("Successful!");
            }
            const fr : FileReader = new FileReader(path);
            let primaryExc_res0 : Throwable = null;
            try {
                defer if (fr != null) {
                    if (primaryExc_res0 != null) {
                        try {
                            fr.close();
                        }
                        catch (suppressedExc : Throwable) {
                            primaryExc_res0.addSuppressed(suppressedExc);
                        }
                    }
                    else {
                        fr.close();
                    }
                }
                const br : BufferedReader = new BufferedReader(fr);
                let primaryExc_res1 : Throwable = null;
                try {
                    defer if (br != null) {
                        if (primaryExc_res1 != null) {
                            try {
                                br.close();
                            }
                            catch (suppressedExc : Throwable) {
                                primaryExc_res1.addSuppressed(suppressedExc);
                            }
                        }
                        else {
                            br.close();
                        }
                    }
                    line = br.readLine();
                }
                catch (t : Throwable) {
                    primaryExc_res1 = t;
                    throw t;
                }
            }
            catch (t : Throwable) {
                primaryExc_res0 = t;
                throw t;
            }
        }
    }
// with catch and finally block
    open scanFile(): void {
        try {
            defer {
                System.out.println("Successful!");
            }
            const scanner : Scanner = new java.util.Scanner(new File("test.txt"));
            let primaryExc_res0 : Throwable = null;
            try {
                defer if (scanner != null) {
                    if (primaryExc_res0 != null) {
                        try {
                            scanner.close();
                        }
                        catch (suppressedExc : Throwable) {
                            primaryExc_res0.addSuppressed(suppressedExc);
                        }
                    }
                    else {
                        scanner.close();
                    }
                }
                while(scanner.hasNext())
                {
                    System.out.println(scanner.nextLine());
                }
            }
            catch (t : Throwable) {
                primaryExc_res0 = t;
                throw t;
            }
        }
        catch (fnfe : FileNotFoundException) {
            fnfe.printStackTrace();
        }

    }
// Resource is variable access
    open writeFile(): void {
        try {
            const scanner : Scanner = new Scanner(new File("testRead.txt"));
            let writer : PrintWriter = new PrintWriter(new File("testWrite.txt"));
            {
                let primaryExc_res0 : Throwable = null;
                try {
                    defer if (scanner != null) {
                        if (primaryExc_res0 != null) {
                            try {
                                scanner.close();
                            }
                            catch (suppressedExc : Throwable) {
                                primaryExc_res0.addSuppressed(suppressedExc);
                            }

                        }
                        else {
                            scanner.close();
                        }
                    }
                    let primaryExc_res1 : Throwable = null;
                    try {
                        defer if (writer != null) {
                            if (primaryExc_res1 != null) {
                                try {
                                    writer.close();
                                }
                                catch (suppressedExc : Throwable) {
                                    primaryExc_res1.addSuppressed(suppressedExc);
                                }
                            }
                            else {
                                writer.close();
                            }
                        }
                        while(scanner.hasNext())
                        {
                            let line : String = scanner.nextLine();
                            writer.println(line);
                        }
                    }
                    catch (t : Throwable) {
                        primaryExc_res1 = t;
                        throw t;
                    }
                }
                catch (t : Throwable) {
                    primaryExc_res0 = t;
                    throw t;
                }
            }
        }
        catch (ex : Exception) {
            System.err.println(ex.getMessage());
        }

    }
// Resource is field access
    inner open class Z  {
        public readonly yz : Y = new Y();
    }

    public inner open class X extends Z  {
        readonly y2 : Y = new Y();
        public open foo(): void {
            let z : Z = new Z();
            try {
                let primaryExc_res0 : Throwable = null;
                try {
                    defer if (this.y2 != null) {
                        if (primaryExc_res0 != null) {
                            try {
                                this.y2.close();
                            }
                            catch (suppressedExc : Throwable) {
                                primaryExc_res0.addSuppressed(suppressedExc);
                            }
                        }
                        else {
                            this.y2.close();
                        }
                    }
                    let primaryExc_res1 : Throwable = null;
                    try {
                        defer if (super.yz != null) {
                            if (primaryExc_res1 != null) {
                                try {
                                    super.yz.close();
                                }
                                catch (suppressedExc : Throwable) {
                                    primaryExc_res1.addSuppressed(suppressedExc);
                                }
                            }
                            else {
                                super.yz.close();
                            }
                        }
                        {
                            let primaryExc_res2 : Throwable = null;
                            try {
                                defer if (z.yz != null) {
                                    if (primaryExc_res2 != null) {
                                        try {
                                            z.yz.close();
                                        }
                                        catch (suppressedExc : Throwable) {
                                            primaryExc_res2.addSuppressed(suppressedExc);
                                        }
                                    }
                                    else {
                                        z.yz.close();
                                    }
                                }
                                System.out.println(this.y2.val + super.yz.val + z.yz.val);
                            }
                            catch (t : Throwable) {
                                primaryExc_res2 = t;
                                throw t;
                            }
                        }
                    }
                    catch (t : Throwable) {
                        primaryExc_res1 = t;
                        throw t;
                    }
                }
                catch (t : Throwable) {
                    primaryExc_res0 = t;
                    throw t;
                }
            }
            catch (e : IOException) {
                System.err.println(e.getMessage());
            }

        }
    }

    inner open class Y implements AutoCloseable  {
        public val : int = 10;
        public override close(): void  throws {
            if (val < 0) {
                throw new IOException("Invalid value: " + val);
            }
            System.out.println("Closed");
        }
    }

// Currently, "try(this)" case doesn't work properly due to bug
// in Eclipse JDT library:
// https://bugs.eclipse.org/bugs/show_bug.cgi?id=577128
// The bug is present in the version of library that the migrator
// is currently restricted to use.
// Uncomment this case, when the library is updated to newer version.
//
//        private void bar() {
//            try (this) {
//                System.out.println("In Try");
//            } catch (IOException e) {
//                System.err.println(e.getMessage());
//            }
//        }
}

