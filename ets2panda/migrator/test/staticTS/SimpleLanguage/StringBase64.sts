/*
 * Copyright (c) 2022-2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import utils.Consumer;

export class StringBase64 {
  private static const TO_BASE64_TABLE: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                               + "abcdefghijklmnopqrstuvwxyz0123456789+/";
  private static const BASE64PAD: char = '=';
  private static const TO_BINARY_TABLE: int[] = [
    -1, -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1, -1,
    -1, -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1, -1,
    -1, -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1, 62,  -1, -1, -1, 63,
    52, 53, 54, 55,  56, 57, 58, 59,  60, 61, -1, -1,  -1,  0, -1, -1,
    -1,  0,  1,  2,   3,  4,  5,  6,   7,  8,  9, 10,  11, 12, 13, 14,
    15, 16, 17, 18,  19, 20, 21, 22,  23, 24, 25, -1,  -1, -1, -1, -1,
    -1, 26, 27, 28,  29, 30, 31, 32,  33, 34, 35, 36,  37, 38, 39, 40,
    41, 42, 43, 44,  45, 46, 47, 48,  49, 50, 51, -1,  -1, -1, -1, -1
  ];

  private static toBase64(data: String): String {
    let result: StringBuilder = new StringBuilder();
    let length: int = data.length();
    let i: int;
    // Convert every three bytes to 4 ascii characters.
    for (i = 0; i < (length - 2); i += 3) {
      result.append(TO_BASE64_TABLE.charAt(data.charAt(i) >> 2));
      result.append(TO_BASE64_TABLE.charAt(((data.charAt(i) & 0x03) << 4)
                                            + (data.charAt(i + 1) >> 4)));
      result.append(TO_BASE64_TABLE.charAt(((data.charAt(i + 1) & 0x0f) << 2)
                                            + (data.charAt(i + 2) >> 6)));
      result.append(TO_BASE64_TABLE.charAt(data.charAt(i + 2) & 0x3f));
    }

    // Convert the remaining 1 or 2 bytes, pad out to 4 characters.
    if (length % 3 != 0) {
      i = length - (length % 3);
      result.append(TO_BASE64_TABLE.charAt(data.charAt(i) >> 2));
      if ((length % 3) == 2) {
        result.append(TO_BASE64_TABLE.charAt(((data.charAt(i) & 0x03) << 4)
                                            + (data.charAt(i + 1) >> 4)));
        result.append(TO_BASE64_TABLE.charAt((data.charAt(i + 1) & 0x0f) << 2));
        result.append(BASE64PAD);
      } else {
        result.append(TO_BASE64_TABLE.charAt((data.charAt(i) & 0x03) << 4));
        result.append(BASE64PAD);
        result.append(BASE64PAD);
      }
    }
    return result.toString();
  }

  private static base64ToString(data: String): String {
    let result: StringBuilder = new StringBuilder();
    let leftbits: int = 0; // number of bits decoded, but yet to be appended
    let leftdata: int = 0; // bits decoded, but yet to be appended

    // Convert one by one.
    for (let i: int = 0; i < data.length(); i++) {
      let c: int = TO_BINARY_TABLE[data.charAt(i) & 0x7f];
      let padding: boolean = data.charAt(i) == BASE64PAD;
      // Skip illegal characters and whitespace
      if (c == -1) {
        continue;
      }
      // Collect data into leftdata, update bitcount
      leftdata = (leftdata << 6) | c;
      leftbits += 6;

      // If we have 8 or more bits, append 8 bits to the result
      if (leftbits >= 8) {
        leftbits -= 8;
        // Append if not padding.
        if (!padding) {
          result.append(((leftdata >> leftbits) & 0xff) as char);
        }
        leftdata &= (1 << leftbits) - 1;
      }
    }

    // If there are any bits left, the base64 string was corrupted
    if (leftbits != 0) {
      throw new RuntimeException("Corrupted base64 string");
    }

    return result.toString();
  }

  n1 = 8192; // TBD was volatile in Java example
  n2 = 16384; // TBD was volatile in Java example

  public run(): void {
    let str: String = "";

    for (let i: int = 0; i < n1; i++) {
      str += ((25 * Math.random()) + 97) as char;
    }

    for (let i: int = n1; i <= n2; i *= 2) {
      let base64: String = toBase64(str);
      let encoded: String = base64ToString(base64);
      if (!encoded.equals(str)) {
        throw new RuntimeException("ERROR: bad result: expected " + str + " but got " + encoded);
      }
      // Double the string
      str += str;
    }
    Consumer.consumeObj(str);
  }
}

