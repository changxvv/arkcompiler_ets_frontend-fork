/*
 * Copyright (c) 2022-2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.util.HashMap;
import utils.Consumer;

export class StringFasta {
  private static const ALU: String =
      "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG"
      + "GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA"
      + "CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT"
      + "ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA"
      + "GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG"
      + "AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC"
      + "AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA";

  private static IUB: HashMap<Character, Double> = new HashMap<>();
  private static HomoSap: HashMap<Character, Double> = new HashMap<>();

  static {
    IUB.put('a', 0.2);
    IUB.put('c', 0.2);
    IUB.put('g', 0.2);
    IUB.put('t', 0.2);
    IUB.put('B', 0.2);
    IUB.put('D', 0.2);
    IUB.put('H', 0.2);
    IUB.put('K', 0.2);
    IUB.put('M', 0.2);
    IUB.put('N', 0.2);
    IUB.put('R', 0.2);
    IUB.put('S', 0.2);
    IUB.put('V', 0.2);
    IUB.put('W', 0.2);
    IUB.put('Y', 0.2);

    HomoSap.put('a', 0.3029549426680);
    HomoSap.put('c', 0.1979883004921);
    HomoSap.put('g', 0.1975473066391);
    HomoSap.put('t', 0.3015094502008);
  }

  private class Random {
    private static last: int = 42;
    private static A: int = 3877;
    private static C: int = 29573;
    private static M: int = 139968;

    public static rand(max: double): double {
      last = (last * A + C) % M;
      return max * last / M;
    }
  }

  private static makeCumulative(table: HashMap<Character, Double>): void {
    let last: Character = null;
    for (let entry: HashMap.Entry<Character, Double> of table.entrySet()) {
      let c: Character = entry.getKey();
      if (last != null) {
        table.put(c, entry.getValue() + table.get(last));
      }
      last = c;
    }
  }

  private static fastaRepeat(n: int, seq: String): int {
    let seqi: int = 0;
    let lenOut: int = 60;
    let ret: int = 0;
    while (n > 0) {
      if (n < lenOut) {
        lenOut = n;
      }
      if (seqi + lenOut < seq.length()) {
        ret += seq.substring(seqi, seqi + lenOut).length();
        seqi += lenOut;
      } else {
        String s = seq.substring(seqi);
        seqi = lenOut - s.length();
        ret += (s + seq.substring(0, seqi)).length();
      }
      n -= lenOut;
    }

    return ret;
  }

  private static fastaRandom(n: int, table: HashMap<Character, Double>): int {
    // Not parsed new char[60]
    let line: char[] = new char[60];
    makeCumulative(table);
    let ret: int = 0;
    while (n > 0) {
      if (n < line.length) {
        line = new char[n];
      }
      for (let i: int = 0; i < line.length; i++) {
        let r: double = Random.rand(1);

        for (let entry: HashMap.Entry<Character, Double> of table.entrySet()) {
          let c: Character = entry.getKey();
          if (r < entry.getValue()) {
            line[i] = c;
            break;
          }
        }
      }

      ret += new String(line).length();
      n -= line.length;
    }

    return ret;
  }

  count = 7; // TBD was volatile in Java example
  static const expected: int = 1456000;

  public run(): void {
    let ret: int = 0;

    ret += fastaRepeat(2 * count * 100000, ALU);
    ret += fastaRandom(3 * count * 1000, IUB);
    ret += fastaRandom(5 * count * 1000, HomoSap);
    if (ret != expected) {
      //System.err.println("ERROR: bad result: expected " + expected + " but got " + ret);
      //System.exit(-1);
    }
    Consumer.consumeInt(ret);
  }
}

