/*
 * Copyright (c) 2022-2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import utils.Consumer;

export class AccessNSieve {
  static const n1: int = 3;
  static const n2: int = 10000;
  static const expected: int = 14302;
  static isPrime: boolean[];

  public setup(): void {
    this.isPrime = new boolean[(1 << n1) * n2 + 1];
  }

  private static nsieve(m: int): int {
    let count: int = 0;

    for (let i: int = 2; i <= m; i++) {      this.isPrime[i] = true;
    }

    for (let i: int = 2; i <= m; i++) {
      if (this.isPrime[i]) {
        for (let k: int = i + i; k <= m; k += i) {
          this.isPrime[k] = false;
        }
        count++;
      }
    }
    return count;
  }

  public static sieve(): int {
    let sum: int = 0;
    for (let i: int = 1; i <= n1; i++) {
      let m: int = (1 << i) * n2;
      sum += nsieve(m);
    }
    return sum;
  }

  public run(): void {
    let ret: int = sieve();
    if (ret != expected) {
      //System.err.println("ERROR: bad result: expected " + expected + " but got " + ret);      //System.exit(-1);
    }
    Consumer.consumeInt(ret);
  }
}

