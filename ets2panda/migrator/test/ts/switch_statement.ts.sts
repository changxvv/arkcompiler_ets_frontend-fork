/*
 * Copyright (c) 2022-2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function caseClausesVariants(): void {
    let x = 0;
    switch (x) {
    }

    switch (x) {
        case 1:
            x = 10;
            break;
        case 2:
            x = 20;
            break;
    }

    switch (x) {
        default:
            x = 31;
            break;
    }

    switch (x) {
        case 1:
            x = 41;
            break;
        case 2:
            break;
        default:
            x = 43;
            break;
    }

    switch (x) {
        default:
            x = 51;
            break;
        case 1:
            x = 52;
            break;
        case 2:
            x = 53;
            break;
    }

    switch (x) {
        case 1:
            x = 61;
            break;
        default:
            x = 62;
            break;
        case 2:
            x = 63;
            break;
    }

    switch (x) {
        case 1:
        case 2:
            console.log("Falling through case 1 and case 2");
            break;
        default:
            console.log("Default case");
            break;
    }

    switch (x) {
        case 1:
        default:
            console.log("Falling through both case and default clauses");
            break;
    }

    switch (x) {
        case 1:
            console.log("Case 1: Falling through to default case");
        default:
            console.log("Default case: falling through to case 2.");
        case 2:
            console.log("Case 2");
    }

}
function withReturns(x : Double): String {
    switch (x) {
        case 1:
            return "One";
        case 2:
            return "Two";
        case 5:
            return "Five";
        default:
            return "NaN";
    }

}
enum Color {
    Red,
    Green,
    Blue
}
function withEnum(color : Color): void {
    switch (color) {
        case Color.Red:
            console.log("Color is red");
            break;
        case Color.Blue:
            console.log("Color is blue");
            break;
        default:
            console.log("Color is default");
            break;
    }

}
function withLocalDeclarations(): void {
    let i = 10;
    switch (i) {
        case 0:
            {
                let q = 5;
                let w = q;
                let e : Double ;
                break;
            }
        default:
            w = 10;
            e = 20;
            console.log(w + e);
            break;
    }

    switch (i) {
        case 0:
            {
                let q = 5, w : __UnknownType__ , e = 10, r : __UnknownType__ ;
                let z = 20, x : __UnknownType__ ;
                console.log(q + e + z);
                break;
            }
        default:
            q = 2;
            r = 4;
            console.log(q + r);
            break;
    }

    let localVar = "value";
    switch (i) {
        case 1:
            {
                let localVar = 5;
                break;
            }
        case 2:
            {
                let localVar = true;
            }
            break;
        default:
            localVar = 10;
            break;
    }

    switch (i) {
        case 0:
            {
                let q = i++, w = i++, e = i++;
                break;
            }
        default:
            q = 1;
            e = 2;
            break;
    }

    switch (i) {
        case 1:
            {
                let k = 10;
                switch (k) {
                    case 3:
                        k = 20;
                        break;
                    default:
                        console.log(k);
                        break;
                }

                break;
            }
        default:
            break;
    }

    {
        let localF1 = (): void => {
            console.log("Case clause");
        }
;
        let localF2 = (): void => {
            console.log("Default clause");
        }
;
        switch (i) {
            case 0:
                localF2();
                break;
            default:
                localF1();
                break;
        }

    }
    switch (i) {
        case 0:
            {
                open class C1  {
                }

                let c1 = new C1();
                break;
            }
        default:
            {
                open class C2  {
                }

                let c2 = new C2();
                break;
            }
    }

}
function withArbitraryExpressions(): void {
    switch (__invalid_expression( /* undefined */)) {
        case __invalid_expression( /* console.log(1) */):
        case __invalid_expression( /* console.log(2) */):
            console.log(3);
            void;
    }

    let x = 10, y = 20, z = 30;
    let foo = (n : Double): Double => n;
    switch (x) {
        case __invalid_expression( /* x + y */):
            console.log("x + y = " + (x + y));
            break;
        case __invalid_expression( /* foo(z) */):
            console.log("foo(z) = " + foo(z));
            break;
        default:
            console.log("default case");
    }

}
