/*
 * Copyright (c) 2022-2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// The Great Computer Language Shootout
//  http://shootout.alioth.debian.org
//
//  Contributed by Ian Osgood

function BitopsNSieveBits() {
  this.n1 = 4;
  this.n2 = 10000;
}

BitopsNSieveBits.prototype.primes = function(isPrime, n) {
  let i: int;
  let m: int = this.n2 << n;
  let size: int = m + 31 >> 5;

  for (i = 0; i < size; i++) isPrime[i] = 0xffffffff;

  for (i = 2; i < m; i++) {
    if (isPrime[i >> 5] & 1 << (i & 31)) {
      for (let j: int = i + i; j < m; j += i) isPrime[j >> 5] &= ~(1 << (j & 31));
    }
  }
};

BitopsNSieveBits.prototype.pad = function(n, width) {
  let s: string = n.toString();
  while (s.length < width) s = ' ' + s;
  return s;
};

BitopsNSieveBits.prototype.sieve = function() {
  for (let i: int = this.n1; i <= this.n1; i++) {
    let isPrime: int[] = new Array((this.n2 << i) + 31 >> 5);
    this.primes(isPrime, i);
  }
  return isPrime;
};

BitopsNSieveBits.prototype.setup = function() {};

BitopsNSieveBits.prototype.run = function() {
  let expected: int = -1286749544853;

  let result: int[] = this.sieve();

  let sum = 0;
  for (let i: int = 0; i < result.length; ++i) sum += result[i];

  if (sum != expected)
    throw 'ERROR: bad result: expected ' + expected + ' but got ' + sum;

  let consumer = new consumer();
  consumer.consumeInt(sum);
};
