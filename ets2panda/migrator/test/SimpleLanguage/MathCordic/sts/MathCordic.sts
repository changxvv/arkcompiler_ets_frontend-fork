/*
 * Copyright (c) 2022-2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Copyright (C) Rich Moore.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

let FIXED = function(X) {
  return X * 65536.0;
};

let DOUBLE = function(X) {
  return X / 65536.0;
};

let DEG2RAD = function(X) {
  return 0.017453 * X;
};

function MathCordic() {
  this.AG_CONST = 0.6072529350;

  this.Angles = [
    FIXED(45.0), FIXED(26.565), FIXED(14.0362), FIXED(7.12502), FIXED(3.57633),
    FIXED(1.78991), FIXED(0.895174), FIXED(0.447614), FIXED(0.223811),
    FIXED(0.111906), FIXED(0.055953), FIXED(0.027977)
  ];

  this.Target = 28.027;
}

MathCordic.prototype.setup = function() {};

MathCordic.prototype.cordicsincos = function(Target) {
  let X: double;
  let Y: double;
  let TargetAngle: double;
  let CurrAngle: double;
  let Step: double;

  X = FIXED(this.AG_CONST); /* AG_CONST * cos(0) */
  Y = 0;                    /* AG_CONST * sin(0) */

  TargetAngle = FIXED(Target);
  CurrAngle = 0;
  for (Step = 0; Step < 12; Step++) {
    let NewX;
    if (TargetAngle > CurrAngle) {
      NewX = X - (Y >> Step);
      Y = (X >> Step) + Y;
      X = NewX;
      CurrAngle += this.Angles[Step];
    } else {
      NewX = X + (Y >> Step);
      Y = -(X >> Step) + Y;
      X = NewX;
      CurrAngle -= this.Angles[Step];
    }
  }

  return DOUBLE(X) * DOUBLE(Y);
};

MathCordic.prototype.cordic = function(runs) {
  let total: int = 0;
  for (let i: int = 0; i < runs; i++) {
    total += this.cordicsincos(this.Target);
  }
  return total;
};

MathCordic.prototype.run = function() {
  let n: int = 25000;
  let expected: double = 10362.570468755888;

  let total: double = this.cordic(n);

  if (total != expected)
    throw 'ERROR: bad result: expected ' + expected + ' but got ' + total;

  let consumer = new consumer();
  consumer.consumeFloat(total);
};
