/*
 * Copyright (c) 2022-2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function StringValidateInput() {
  this.letters = new Array(
      'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
      'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');
  this.ints = new Array(
      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
      22, 23, 24, 25, 26);
  this.colors = new Array('FF', 'CC', '99', '66', '33', '00');

  this.endResult = '';
}

StringValidateInput.prototype.doTest = function() {
  this.endResult = '';

  // make up email address
  for (let k = 0; k < 4000; k++) {
    let username = this.makeName(6);
    let email;
    (k % 2) ? email = username + '@mac.com' : email = username + '(at)mac.com';

    // validate the email address
    let pattern =
        /^[a-zA-Z0-9\-\._]+@[a-zA-Z0-9\-_]+(\.?[a-zA-Z0-9\-_]*)\.[a-zA-Z]{2,3}$/;

    if (pattern.test(email)) {
      let r = email + ' appears to be a valid email address.';
      this.addResult(r);
    } else {
      let r = email + ' does NOT appear to be a valid email address.';
      this.addResult(r);
    }
  }

  // make up ZIP codes
  for (let s = 0; s < 4000; s++) {
    let zipGood = true;
    let zip = this.makeint(4);
    (s % 2) ? zip = zip + 'xyz' : zip = zip.concat('7');

    // validate the zip code
    for (let i = 0; i < zip.length; i++) {
      let ch = zip.charAt(i);
      if (ch < '0' || ch > '9') {
        zipGood = false;
        let r = zip + ' contains letters.';
        this.addResult(r);
      }
    }
    if (zipGood && zip.length > 5) {
      zipGood = false;
      let r = zip + ' is longer than five characters.';
      this.addResult(r);
    }
    if (zipGood) {
      let r = zip + ' appears to be a valid ZIP code.';
      this.addResult(r);
    }
  }
};

StringValidateInput.prototype.makeName = function(n) {
  let tmp = '';
  for (let i = 0; i < n; i++) {
    let l = Math.floor(26 * Math.random());
    tmp += this.letters[l];
  }
  return tmp;
};

StringValidateInput.prototype.makeint = function(n) {
  let tmp = '';
  for (let i = 0; i < n; i++) {
    let l = Math.floor(9 * Math.random());
    let ls: string = String(l);
    tmp = tmp.concat(ls);
  }
  return tmp;
};

StringValidateInput.prototype.addResult = function(r) {
  this.endResult += '\n' + r;
};

StringValidateInput.prototype.setup = function() {
  this.endResult = '';
};

StringValidateInput.prototype.run = function() {
  this.doTest();

  let consumer = new consumer();
  consumer.consumeInt(this.ret);
};
