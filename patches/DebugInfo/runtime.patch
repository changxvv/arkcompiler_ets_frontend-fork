diff --git a/assembler/assembly-debug.h b/assembler/assembly-debug.h
old mode 100644
new mode 100755
index cf1f325b..530c30fe
--- a/assembler/assembly-debug.h
+++ b/assembler/assembly-debug.h
@@ -24,6 +24,7 @@ namespace panda::pandasm::debuginfo {
 
 struct Ins {
     size_t line_number = 0;
+    size_t column_number = 0;
     std::string whole_line = "";
     size_t bound_left = 0;
     size_t bound_right = 0;
@@ -33,6 +34,11 @@ struct Ins {
         line_number = ln;
     }
 
+    void SetColumnNumber(size_t cn)
+    {
+        column_number = cn;
+    }
+
     Ins() = default;
     Ins(size_t l_n, std::string &f_c, size_t b_l, size_t b_r)
         : line_number(l_n), whole_line(std::move(f_c)), bound_left(b_l), bound_right(b_r)
diff --git a/assembler/assembly-emitter.cpp b/assembler/assembly-emitter.cpp
old mode 100644
new mode 100755
index 2e300c4f..939815e2
--- a/assembler/assembly-emitter.cpp
+++ b/assembler/assembly-emitter.cpp
@@ -1621,6 +1621,11 @@ size_t Function::GetLineNumber(size_t i) const
     return static_cast<int32_t>(ins[i].ins_debug.line_number);
 }
 
+size_t Function::GetColumnNumber(size_t i) const
+{
+    return static_cast<int32_t>(ins[i].ins_debug.column_number);
+}
+
 void Function::EmitNumber(panda_file::LineNumberProgramItem *program, std::vector<uint8_t> *constant_pool,
                           uint32_t pc_inc, int32_t line_inc) const
 {
@@ -1649,6 +1654,22 @@ void Function::EmitLineNumber(panda_file::LineNumberProgramItem *program, std::v
     }
 }
 
+void Function::EmitColumnNumber(panda_file::LineNumberProgramItem *program, std::vector<uint8_t> *constant_pool,
+                        int32_t &prev_column_number, uint32_t &pc_inc, size_t instruction_number, bool emit_debug_info) const
+{
+    if (emit_debug_info) {
+        int32_t cn = GetColumnNumber(instruction_number);
+        if (cn != prev_column_number) {
+            program->EmitColumn(constant_pool, pc_inc, cn);
+            pc_inc = 0;
+            prev_column_number = cn;
+        }
+        return;
+    }
+
+
+}
+
 void Function::BuildLineNumberProgram(panda_file::DebugInfoItem *debug_item, const std::vector<uint8_t> &bytecode,
                                       ItemContainer *container, std::vector<uint8_t> *constant_pool,
                                       bool emit_debug_info) const
@@ -1662,6 +1683,7 @@ void Function::BuildLineNumberProgram(panda_file::DebugInfoItem *debug_item, con
 
     uint32_t pc_inc = 0;
     int32_t prev_line_number = GetLineNumber(0);
+    int32_t prev_column_number = GetColumnNumber(0);
     BytecodeInstruction bi(bytecode.data());
     debug_item->SetLineNumber(static_cast<uint32_t>(prev_line_number));
 
@@ -1677,6 +1699,10 @@ void Function::BuildLineNumberProgram(panda_file::DebugInfoItem *debug_item, con
             EmitLineNumber(program, constant_pool, prev_line_number, pc_inc, i);
         }
 
+        if (language == pandasm::extensions::Language::ECMASCRIPT) {
+            EmitColumnNumber(program, constant_pool, prev_column_number, pc_inc, i, emit_debug_info);
+        }
+
         pc_inc += bi.GetSize();
         bi = bi.GetNext();
     }
diff --git a/assembler/assembly-function.h b/assembler/assembly-function.h
old mode 100644
new mode 100755
index 91137d1b..c06a4f69
--- a/assembler/assembly-function.h
+++ b/assembler/assembly-function.h
@@ -131,6 +131,8 @@ struct Function {
               const std::unordered_map<std::string, panda_file::LiteralArrayItem *> &literalarrays) const;
 
     size_t GetLineNumber(size_t i) const;
+    
+    size_t GetColumnNumber(size_t i) const;
 
     void EmitLocalVariable(panda_file::LineNumberProgramItem *program, panda_file::ItemContainer *container,
                            std::vector<uint8_t> *constant_pool, uint32_t &pc_inc, size_t instruction_number) const;
@@ -138,6 +140,9 @@ struct Function {
                     int32_t line_inc) const;
     void EmitLineNumber(panda_file::LineNumberProgramItem *program, std::vector<uint8_t> *constant_pool,
                         int32_t &prev_line_number, uint32_t &pc_inc, size_t instruction_number) const;
+    // column number is only for javascript for now
+    void EmitColumnNumber(panda_file::LineNumberProgramItem *program, std::vector<uint8_t> *constant_pool,
+                        int32_t &prev_column_number, uint32_t &pc_inc, size_t instruction_number, bool emit_debug_info) const;
 
     void BuildLineNumberProgram(panda_file::DebugInfoItem *debug_item, const std::vector<uint8_t> &bytecode,
                                 panda_file::ItemContainer *container, std::vector<uint8_t> *constant_pool,
diff --git a/libpandafile/file_items.cpp b/libpandafile/file_items.cpp
old mode 100644
new mode 100755
index 7f3e3b56..4dc7239f
--- a/libpandafile/file_items.cpp
+++ b/libpandafile/file_items.cpp
@@ -1387,6 +1387,15 @@ bool LineNumberProgramItem::EmitSpecialOpcode(uint32_t pc_inc, int32_t line_inc)
     return true;
 }
 
+void LineNumberProgramItem::EmitColumn(std::vector<uint8_t> *constant_pool, uint32_t pc_inc, int32_t column)
+{
+    if (pc_inc != 0U) {
+        EmitAdvancePc(constant_pool, pc_inc);
+    }
+    EmitOpcode(Opcode::SET_COLUMN);
+    EmitUleb128(constant_pool, column);
+}
+
 void LineNumberProgramItem::EmitPrologEnd()
 {
     EmitOpcode(Opcode::SET_PROLOGUE_END);
diff --git a/libpandafile/file_items.h b/libpandafile/file_items.h
old mode 100644
new mode 100755
index 27a09082..1c3404cc
--- a/libpandafile/file_items.h
+++ b/libpandafile/file_items.h
@@ -489,6 +489,8 @@ public:
         SET_EPILOGUE_BEGIN = 0x08,
         SET_FILE = 0x09,
         SET_SOURCE_CODE = 0x0a,
+        SET_COLUMN = 0X0b, // The SET_COLUMN opcode takes a single unsigned LEB128 operand and
+                           // stores it in the column register of the state machine.
         LAST
     };
 
@@ -514,6 +516,8 @@ public:
 
     bool EmitSpecialOpcode(uint32_t pc_inc, int32_t line_inc);
 
+    void EmitColumn(std::vector<uint8_t> *constant_pool, uint32_t pc_inc, int32_t column);
+
     void EmitPrologEnd();
 
     void EmitEpilogBegin();
diff --git a/libpandafile/line_program_state.h b/libpandafile/line_program_state.h
old mode 100644
new mode 100755
